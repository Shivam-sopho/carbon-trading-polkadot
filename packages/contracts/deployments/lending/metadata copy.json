{
  "source": {
    "hash": "0x8f9c34eb1c8fe1bf7b7493c004d09ff60dad586e1767a60d642f8359462738d2",
    "language": "ink! 3.4.0",
    "compiler": "rustc 1.69.0-nightly"
  },
  "contract": {
    "name": "lending_contract",
    "version": "2.3.0",
    "authors": [
      "Supercolony <dominik.krizo@supercolony.net>"
    ]
  },
  "V3": {
    "spec": {
      "constructors": [
        {
          "args": [
            {
              "label": "shares_hash",
              "type": {
                "displayName": [
                  "Hash"
                ],
                "type": 23
              }
            },
            {
              "label": "loan_hash",
              "type": {
                "displayName": [
                  "Hash"
                ],
                "type": 23
              }
            }
          ],
          "docs": [
            "constructor with name and symbol"
          ],
          "label": "new",
          "payable": true,
          "selector": "0x9bae9d5e"
        }
      ],
      "docs": [
        " This will be a simple lending contract where users can:",
        "",
        " 1. Lend tokens accepted by the smart contract.",
        " The allowance and disallowance of tokens is done by the accounts which have a manager role",
        " Upon lending, the user gets a PSP22 token representing their share of the current liquidity pool",
        "",
        " 2. Borrow tokens from the smart contract by depositing collateral tokens.",
        " The tokens which can be deposited as collateral are allowed and disallowed by the accounts with manager role",
        " Upon borrowing user gets a PSP34 token representing info about their loan (how much assets were borrowed,",
        " when did they borrow, what asset was borrowed, what asset was used as collateral, how much collateral assets",
        " were deposited, the liquidation price of the loan and if it was liquidated or not)",
        "",
        " 3. Repay their loan by depositing the borrowed amount of borrowed assets along with interest.",
        " The contract determines how much a user needs to deposit and how much collateral they get back by an NFT token",
        " which the user gets upon borrowing the assets. The user is also able to repay a portion of the loan, but will only get",
        " a portion of their collateral assets back, while the liquidation price will stay the same",
        "",
        " 4. Withdraw tokens deposited to the smart contract",
        " User deposits their share tokens to the smart contract and the smart contract determines how much of the underlying",
        " asset they get back",
        "",
        " 5. Liquidate a loan",
        " User can call a liquidation of a loan. If the price of collateral token of the loan is below or equal to the liquidation price,",
        " the loan is then liquidated and the user performing the liquidation will get 1% of the liquidated assets",
        "",
        " 6. Allow and disallow assets for lending",
        " This can only be done by the accounts with the manager role",
        "",
        " 7. Allow and disallow assets to be used as a collateral",
        " This can only be done by the accounts with the manager role",
        "",
        " 8. Pause the contract",
        " Users with the manager role can pause the contract. If the contract is paused, no borrowing or lending can be performed",
        " Users can still repay their loans, liquidate loans or withdraw their deposits"
      ],
      "events": [],
      "messages": [
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "GrantRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "account",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "GrantRoleInput2"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Grants `role` to `account`.",
            "",
            " On success a `RoleGranted` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns with `MissingRole` error if caller can't grant the role.",
            " Returns with `RoleRedundant` error `account` has `role`."
          ],
          "label": "AccessControl::grant_role",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "GrantRoleOutput"
            ],
            "type": 24
          },
          "selector": "0x4ac062fd"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "HasRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "address",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "HasRoleInput2"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Returns `true` if `account` has been granted `role`."
          ],
          "label": "AccessControl::has_role",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "HasRoleOutput"
            ],
            "type": 12
          },
          "selector": "0xc1d9ac18"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "GetRoleAdminInput1"
                ],
                "type": 1
              }
            }
          ],
          "docs": [
            " Returns the admin role that controls `role`. See `grant_role` and `revoke_role`."
          ],
          "label": "AccessControl::get_role_admin",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "GetRoleAdminOutput"
            ],
            "type": 1
          },
          "selector": "0x83da3bb2"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RevokeRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "account",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RevokeRoleInput2"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Revokes `role` from `account`.",
            "",
            " On success a `RoleRevoked` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns with `MissingRole` error if caller can't grant the `role` or if `account` doesn't have `role`."
          ],
          "label": "AccessControl::revoke_role",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "RevokeRoleOutput"
            ],
            "type": 24
          },
          "selector": "0x6e4f0991"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RenounceRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "account",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RenounceRoleInput2"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " Revokes `role` from the calling account.",
            " Roles are often managed via `grant_role` and `revoke_role`: this function's",
            " purpose is to provide a mechanism for accounts to lose their privileges",
            " if they are compromised (such as when a trusted device is misplaced).",
            "",
            " On success a `RoleRevoked` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns with `InvalidCaller` error if caller is not `account`.",
            " Returns with `MissingRole` error if `account` doesn't have `role`."
          ],
          "label": "AccessControl::renounce_role",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "RenounceRoleOutput"
            ],
            "type": 24
          },
          "selector": "0xeaf1248a"
        },
        {
          "args": [],
          "docs": [
            " Returns true if the contract is paused, and false otherwise."
          ],
          "label": "Pausable::paused",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "pausable_external",
              "PausedOutput"
            ],
            "type": 12
          },
          "selector": "0xd123ce11"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "TotalAssetInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will return the total amount of assets available to borrow",
            " along with amount of the same asset borrowed",
            "",
            " Returns `AssetNotSupported` error if we try to get amount of asset not supported by our contract"
          ],
          "label": "Lending::total_asset",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "TotalAssetOutput"
            ],
            "type": 26
          },
          "selector": "0x6c6f7b00"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "LendAssetsInput1"
                ],
                "type": 6
              }
            },
            {
              "label": "amount",
              "type": {
                "displayName": [
                  "lending_external",
                  "LendAssetsInput2"
                ],
                "type": 20
              }
            }
          ],
          "docs": [
            " This function is called by a user who wants to lend tokens and gain interest",
            "",
            " `asset_address` is the AccountId of the PSP22 token to be deposited",
            " `amount` is the amount to be deposited",
            "",
            " Returns `InsufficientAllowanceToLend` if the caller does not have enough allowance",
            " Returns `InsufficientBalanceToLend` if the caller does not have enough balance",
            " Returns `AssetNotSupported` if the asset is not supported for lending"
          ],
          "label": "Lending::lend_assets",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "LendAssetsOutput"
            ],
            "type": 32
          },
          "selector": "0xfe4eb7c4"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "BorrowAssetsInput1"
                ],
                "type": 6
              }
            },
            {
              "label": "collateral_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "BorrowAssetsInput2"
                ],
                "type": 6
              }
            },
            {
              "label": "amount",
              "type": {
                "displayName": [
                  "lending_external",
                  "BorrowAssetsInput3"
                ],
                "type": 20
              }
            }
          ],
          "docs": [
            " This function is called by a user who wants to borrow tokens. In order to do that,",
            " they need to deposit collateral. The value of borrowed assets will be equal to 70%",
            " of the value of deposited collateral.",
            "",
            " `asset_address` is the AccountId of the PSP22 token to be borrowed",
            " `collateral_address` is the AccountId of the PSP22 token used as collateral",
            " `amount` is the amount to be deposited",
            "",
            " Returns `AssetNotSupported` if `asset_address` is not supported for using as collateral",
            " Returns `InsufficientAllowanceForCollateral` if the caller does not have enough allowance",
            " Returns `InsufficientCollateralBalance` if the caller does not have enough balance",
            " Returns `AssetNotSupported` if the borrowing asset is not supported for borrowing",
            " Returns `AmountNotSupported` if the liquidation price is less than or equal to the borrowed amount",
            " Returns `InsufficientBalanceInContract` if there is not enough amount of assets in the contract to borrow"
          ],
          "label": "Lending::borrow_assets",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "BorrowAssetsOutput"
            ],
            "type": 32
          },
          "selector": "0xf8151581"
        },
        {
          "args": [
            {
              "label": "loan_id",
              "type": {
                "displayName": [
                  "lending_external",
                  "LiquidateLoanInput1"
                ],
                "type": 33
              }
            }
          ],
          "docs": [
            " This function will liquidate the loan with `loan_id`. In this example contract the tokens will be kept in the smart",
            " contract and the liquidator gets 1% of the liquidated assets. In a real implementation we would swap the collateral",
            " for the borrowed asset so we would be able to cover the shares of lenders.",
            "",
            " `loan_id` id of loan to be liquidated",
            "",
            " Returns `LoanLiquidated` error if the loan was already liquidated",
            " Returns `CanNotBeLiquidated` error if the price of collateral is not below the liquidation price"
          ],
          "label": "Lending::liquidate_loan",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "LiquidateLoanOutput"
            ],
            "type": 32
          },
          "selector": "0x9a76602f"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "GetAssetSharesInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function  will return the address of shares",
            " which is bound to `asset_address` asset token"
          ],
          "label": "Lending::get_asset_shares",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "GetAssetSharesOutput"
            ],
            "type": 36
          },
          "selector": "0x6341e463"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "IsAcceptedLendingInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will return true if the asset is accepted by the contract"
          ],
          "label": "Lending::is_accepted_lending",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "IsAcceptedLendingOutput"
            ],
            "type": 12
          },
          "selector": "0x8e12e70d"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "IsAcceptedCollateralInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will return true if the asset is accepted for using as collateral"
          ],
          "label": "Lending::is_accepted_collateral",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "IsAcceptedCollateralOutput"
            ],
            "type": 12
          },
          "selector": "0xe5bbf16b"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "TotalSharesInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will return the total amount of shares minted for an asset",
            "",
            " Returns `AssetNotSupported` error if we try to get shares of asset not supported by our contract"
          ],
          "label": "Lending::total_shares",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "TotalSharesOutput"
            ],
            "type": 26
          },
          "selector": "0x13a5e0c3"
        },
        {
          "args": [
            {
              "label": "loan_id",
              "type": {
                "displayName": [
                  "lending_external",
                  "RepayInput1"
                ],
                "type": 33
              }
            },
            {
              "label": "repay_amount",
              "type": {
                "displayName": [
                  "lending_external",
                  "RepayInput2"
                ],
                "type": 20
              }
            }
          ],
          "docs": [
            " This function is called by the user who borrowed some asset. User needs to deposit borrowed amount along with interest",
            " They can either repay the full amount or just a portion of the amount. If they repay the full amount, they will get all deposited",
            " collateral back, another way they will get back the same portion of collateral as the repay portion (eg. if they deposit 80% of",
            " the loan + interests, they will get 80% of collateral back). If the loan was liquidated, the user does not get their collateral",
            " back and the NFT will be burned",
            "",
            " `loan_id` is the id of the loan to be repaid",
            " `repay_amount` is the amount of borrowed asset to be repaid",
            "",
            " Returns true if the loan was repaid successfuly, false if the loan was already liquidated and can not be repaid",
            " Returns `NotTheOwner` error if the initiator is not the owner of the loan token",
            " Returns `InsufficientAllowanceToRepay` error if the initiator did not give allowance to the contract",
            " Returns `InsufficientBalanceToRepay` error if the initiator tries to repay more tokens than their balance"
          ],
          "label": "Lending::repay",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "RepayOutput"
            ],
            "type": 37
          },
          "selector": "0xf2c8a0d0"
        },
        {
          "args": [
            {
              "label": "shares_address",
              "type": {
                "displayName": [
                  "lending_external",
                  "WithdrawAssetInput1"
                ],
                "type": 6
              }
            },
            {
              "label": "shares_amount",
              "type": {
                "displayName": [
                  "lending_external",
                  "WithdrawAssetInput2"
                ],
                "type": 20
              }
            }
          ],
          "docs": [
            " This function is called by the user who wants to withdraw assets they deposited for lending. They will deposit their",
            " share tokens and get back their share of the asset mapped to this share token",
            "",
            " `shares_address` account id of the shares token which is binded to the asset",
            " `shares_amount` amount of shares being withdrawn",
            "",
            " Returns `InsufficientBalanceInContract` if there is currently not enough assets in the contract"
          ],
          "label": "Lending::withdraw_asset",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lending_external",
              "WithdrawAssetOutput"
            ],
            "type": 32
          },
          "selector": "0xd4bbb8e2"
        },
        {
          "args": [
            {
              "label": "asset_in",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "SetAssetPriceInput1"
                ],
                "type": 6
              }
            },
            {
              "label": "asset_out",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "SetAssetPriceInput2"
                ],
                "type": 6
              }
            },
            {
              "label": "price",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "SetAssetPriceInput3"
                ],
                "type": 20
              }
            }
          ],
          "docs": [
            " This function will set price of `asset_in` in `asset_out` to `amount` in our simulated oracle"
          ],
          "label": "LendingPermissioned::set_asset_price",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lendingpermissioned_external",
              "SetAssetPriceOutput"
            ],
            "type": 32
          },
          "selector": "0xeea5af8d"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "AllowCollateralInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will allow an asset to be accepted as collateral"
          ],
          "label": "LendingPermissioned::allow_collateral",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lendingpermissioned_external",
              "AllowCollateralOutput"
            ],
            "type": 32
          },
          "selector": "0xa40d93ce"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "DisallowLendingInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will disallow lending and borrowing of asset",
            " To do this all assets of this asset must be repaid and all of the asset must be withdrawn"
          ],
          "label": "LendingPermissioned::disallow_lending",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lendingpermissioned_external",
              "DisallowLendingOutput"
            ],
            "type": 32
          },
          "selector": "0x665e0717"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "AllowAssetInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will allow an asset to be accepted by the contract",
            " It will also create the contracts for the shares token and lended reserves token"
          ],
          "label": "LendingPermissioned::allow_asset",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "lendingpermissioned_external",
              "AllowAssetOutput"
            ],
            "type": 32
          },
          "selector": "0x6b96f842"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "lendingpermissioned_external",
                  "DisallowCollateralInput1"
                ],
                "type": 6
              }
            }
          ],
          "docs": [
            " This function will disallow an asset to be accepted as collateral"
          ],
          "label": "LendingPermissioned::disallow_collateral",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "lendingpermissioned_external",
              "DisallowCollateralOutput"
            ],
            "type": 32
          },
          "selector": "0xf1166a27"
        }
      ]
    },
    "storage": {
      "struct": {
        "fields": [
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x75b08c5a00000000000000000000000000000000000000000000000000000000",
                        "ty": 0
                      }
                    },
                    "name": "admin_roles"
                  },
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x2779f6fc00000000000000000000000000000000000000000000000000000000",
                                "ty": 4
                              }
                            },
                            "name": "members"
                          },
                          {
                            "layout": {
                              "enum": {
                                "dispatchKey": "0x2879f6fc00000000000000000000000000000000000000000000000000000000",
                                "variants": {
                                  "0": {
                                    "fields": [
                                      {
                                        "layout": {
                                          "cell": {
                                            "key": "0x2979f6fc00000000000000000000000000000000000000000000000000000000",
                                            "ty": 9
                                          }
                                        },
                                        "name": null
                                      }
                                    ]
                                  },
                                  "1": {
                                    "fields": []
                                  }
                                }
                              }
                            },
                            "name": "_reserved"
                          }
                        ]
                      }
                    },
                    "name": "members"
                  },
                  {
                    "layout": {
                      "enum": {
                        "dispatchKey": "0x76b08c5a00000000000000000000000000000000000000000000000000000000",
                        "variants": {
                          "0": {
                            "fields": [
                              {
                                "layout": {
                                  "cell": {
                                    "key": "0x77b08c5a00000000000000000000000000000000000000000000000000000000",
                                    "ty": 9
                                  }
                                },
                                "name": null
                              }
                            ]
                          },
                          "1": {
                            "fields": []
                          }
                        }
                      }
                    },
                    "name": "_reserved"
                  }
                ]
              }
            },
            "name": "access"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0xca7202c400000000000000000000000000000000000000000000000000000000",
                        "ty": 12
                      }
                    },
                    "name": "paused"
                  },
                  {
                    "layout": {
                      "enum": {
                        "dispatchKey": "0xcb7202c400000000000000000000000000000000000000000000000000000000",
                        "variants": {
                          "0": {
                            "fields": [
                              {
                                "layout": {
                                  "cell": {
                                    "key": "0xcc7202c400000000000000000000000000000000000000000000000000000000",
                                    "ty": 9
                                  }
                                },
                                "name": null
                              }
                            ]
                          },
                          "1": {
                            "fields": []
                          }
                        }
                      }
                    },
                    "name": "_reserved"
                  }
                ]
              }
            },
            "name": "pause"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x93454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 13
                      }
                    },
                    "name": "assets_lended"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x94454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 13
                      }
                    },
                    "name": "asset_shares"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x95454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 13
                      }
                    },
                    "name": "shares_asset"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x96454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 16
                      }
                    },
                    "name": "collateral_accepted"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x97454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 19
                      }
                    },
                    "name": "asset_price"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x98454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 23
                      }
                    },
                    "name": "shares_contract_code_hash"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0x99454df300000000000000000000000000000000000000000000000000000000",
                        "ty": 6
                      }
                    },
                    "name": "loan_account"
                  }
                ]
              }
            },
            "name": "lending"
          }
        ]
      }
    },
    "types": [
      {
        "id": 0,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 2
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 1
            },
            {
              "name": "V",
              "type": 1
            }
          ],
          "path": [
            "openbrush_lang",
            "storage",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 1,
        "type": {
          "def": {
            "primitive": "u32"
          }
        }
      },
      {
        "id": 2,
        "type": {
          "def": {
            "sequence": {
              "type": 3
            }
          }
        }
      },
      {
        "id": 3,
        "type": {
          "def": {
            "tuple": [
              1,
              1
            ]
          }
        }
      },
      {
        "id": 4,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 10
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 5
            },
            {
              "name": "V",
              "type": 9
            }
          ],
          "path": [
            "openbrush_lang",
            "storage",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 5,
        "type": {
          "def": {
            "tuple": [
              1,
              6
            ]
          }
        }
      },
      {
        "id": 6,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 7,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "AccountId"
          ]
        }
      },
      {
        "id": 7,
        "type": {
          "def": {
            "array": {
              "len": 32,
              "type": 8
            }
          }
        }
      },
      {
        "id": 8,
        "type": {
          "def": {
            "primitive": "u8"
          }
        }
      },
      {
        "id": 9,
        "type": {
          "def": {
            "tuple": []
          }
        }
      },
      {
        "id": 10,
        "type": {
          "def": {
            "sequence": {
              "type": 11
            }
          }
        }
      },
      {
        "id": 11,
        "type": {
          "def": {
            "tuple": [
              5,
              9
            ]
          }
        }
      },
      {
        "id": 12,
        "type": {
          "def": {
            "primitive": "bool"
          }
        }
      },
      {
        "id": 13,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 14
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 6
            }
          ],
          "path": [
            "openbrush_lang",
            "storage",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 14,
        "type": {
          "def": {
            "sequence": {
              "type": 15
            }
          }
        }
      },
      {
        "id": 15,
        "type": {
          "def": {
            "tuple": [
              6,
              6
            ]
          }
        }
      },
      {
        "id": 16,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 17
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 12
            }
          ],
          "path": [
            "openbrush_lang",
            "storage",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 17,
        "type": {
          "def": {
            "sequence": {
              "type": 18
            }
          }
        }
      },
      {
        "id": 18,
        "type": {
          "def": {
            "tuple": [
              6,
              12
            ]
          }
        }
      },
      {
        "id": 19,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 21
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 15
            },
            {
              "name": "V",
              "type": 20
            }
          ],
          "path": [
            "openbrush_lang",
            "storage",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 20,
        "type": {
          "def": {
            "primitive": "u128"
          }
        }
      },
      {
        "id": 21,
        "type": {
          "def": {
            "sequence": {
              "type": 22
            }
          }
        }
      },
      {
        "id": 22,
        "type": {
          "def": {
            "tuple": [
              15,
              20
            ]
          }
        }
      },
      {
        "id": 23,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 7,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "Hash"
          ]
        }
      },
      {
        "id": 24,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 9
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 25
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 9
            },
            {
              "name": "E",
              "type": 25
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 25,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "InvalidCaller"
                },
                {
                  "index": 1,
                  "name": "MissingRole"
                },
                {
                  "index": 2,
                  "name": "RoleRedundant"
                }
              ]
            }
          },
          "path": [
            "openbrush_contracts",
            "traits",
            "errors",
            "access_control",
            "AccessControlError"
          ]
        }
      },
      {
        "id": 26,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 20
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 27
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 20
            },
            {
              "name": "E",
              "type": 27
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 27,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 28,
                      "typeName": "PSP22Error"
                    }
                  ],
                  "index": 0,
                  "name": "PSP22Error"
                },
                {
                  "fields": [
                    {
                      "type": 30,
                      "typeName": "PSP34Error"
                    }
                  ],
                  "index": 1,
                  "name": "PSP34Error"
                },
                {
                  "fields": [
                    {
                      "type": 25,
                      "typeName": "AccessControlError"
                    }
                  ],
                  "index": 2,
                  "name": "AccessControlError"
                },
                {
                  "fields": [
                    {
                      "type": 31,
                      "typeName": "PausableError"
                    }
                  ],
                  "index": 3,
                  "name": "PausableError"
                },
                {
                  "index": 4,
                  "name": "InsufficientAllowanceToLend"
                },
                {
                  "index": 5,
                  "name": "InsufficientBalanceToLend"
                },
                {
                  "index": 6,
                  "name": "InsufficientAllowanceToRepay"
                },
                {
                  "index": 7,
                  "name": "InsufficientBalanceToRepay"
                },
                {
                  "index": 8,
                  "name": "InsufficientAllowanceForCollateral"
                },
                {
                  "index": 9,
                  "name": "InsufficientCollateralBalance"
                },
                {
                  "index": 10,
                  "name": "AmountNotSupported"
                },
                {
                  "index": 11,
                  "name": "InsufficientBalanceInContract"
                },
                {
                  "index": 12,
                  "name": "AssetNotSupported"
                },
                {
                  "index": 13,
                  "name": "AssetSupported"
                },
                {
                  "index": 14,
                  "name": "NotTheOwner"
                },
                {
                  "index": 15,
                  "name": "LoanLiquidated"
                },
                {
                  "index": 16,
                  "name": "CanNotBeLiquidated"
                },
                {
                  "index": 17,
                  "name": "AssetsInTheContract"
                }
              ]
            }
          },
          "path": [
            "lending_project",
            "traits",
            "lending",
            "LendingError"
          ]
        }
      },
      {
        "id": 28,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 29,
                      "typeName": "String"
                    }
                  ],
                  "index": 0,
                  "name": "Custom"
                },
                {
                  "index": 1,
                  "name": "InsufficientBalance"
                },
                {
                  "index": 2,
                  "name": "InsufficientAllowance"
                },
                {
                  "index": 3,
                  "name": "ZeroRecipientAddress"
                },
                {
                  "index": 4,
                  "name": "ZeroSenderAddress"
                },
                {
                  "fields": [
                    {
                      "type": 29,
                      "typeName": "String"
                    }
                  ],
                  "index": 5,
                  "name": "SafeTransferCheckFailed"
                }
              ]
            }
          },
          "path": [
            "openbrush_contracts",
            "traits",
            "errors",
            "psp22",
            "PSP22Error"
          ]
        }
      },
      {
        "id": 29,
        "type": {
          "def": {
            "sequence": {
              "type": 8
            }
          }
        }
      },
      {
        "id": 30,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 29,
                      "typeName": "String"
                    }
                  ],
                  "index": 0,
                  "name": "Custom"
                },
                {
                  "index": 1,
                  "name": "SelfApprove"
                },
                {
                  "index": 2,
                  "name": "NotApproved"
                },
                {
                  "index": 3,
                  "name": "TokenExists"
                },
                {
                  "index": 4,
                  "name": "TokenNotExists"
                },
                {
                  "fields": [
                    {
                      "type": 29,
                      "typeName": "String"
                    }
                  ],
                  "index": 5,
                  "name": "SafeTransferCheckFailed"
                }
              ]
            }
          },
          "path": [
            "openbrush_contracts",
            "traits",
            "errors",
            "psp34",
            "PSP34Error"
          ]
        }
      },
      {
        "id": 31,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "Paused"
                },
                {
                  "index": 1,
                  "name": "NotPaused"
                }
              ]
            }
          },
          "path": [
            "openbrush_contracts",
            "traits",
            "errors",
            "pausable",
            "PausableError"
          ]
        }
      },
      {
        "id": 32,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 9
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 27
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 9
            },
            {
              "name": "E",
              "type": 27
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 33,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 8,
                      "typeName": "u8"
                    }
                  ],
                  "index": 0,
                  "name": "U8"
                },
                {
                  "fields": [
                    {
                      "type": 34,
                      "typeName": "u16"
                    }
                  ],
                  "index": 1,
                  "name": "U16"
                },
                {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "u32"
                    }
                  ],
                  "index": 2,
                  "name": "U32"
                },
                {
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "u64"
                    }
                  ],
                  "index": 3,
                  "name": "U64"
                },
                {
                  "fields": [
                    {
                      "type": 20,
                      "typeName": "u128"
                    }
                  ],
                  "index": 4,
                  "name": "U128"
                },
                {
                  "fields": [
                    {
                      "type": 29,
                      "typeName": "Vec<u8>"
                    }
                  ],
                  "index": 5,
                  "name": "Bytes"
                }
              ]
            }
          },
          "path": [
            "openbrush_contracts",
            "traits",
            "types",
            "Id"
          ]
        }
      },
      {
        "id": 34,
        "type": {
          "def": {
            "primitive": "u16"
          }
        }
      },
      {
        "id": 35,
        "type": {
          "def": {
            "primitive": "u64"
          }
        }
      },
      {
        "id": 36,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 6
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 27
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 6
            },
            {
              "name": "E",
              "type": 27
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 37,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 12
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 27
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 12
            },
            {
              "name": "E",
              "type": 27
            }
          ],
          "path": [
            "Result"
          ]
        }
      }
    ]
  }
}